(function (d3$1) {
  'use strict';

  //parsear keys
  const parseador = (data) => {
    const changeCaseOfKey = (key) => {
      return key.split(' ').join('_');
    };

    const isObject = (o) => {
      return (
        o === Object(o) &&
        !Array.isArray(o) &&
        typeof o !== 'function'
      );
    };

    const parseoKey = (entity) => {
      if (entity === null) return entity;

      if (isObject(entity)) {
        const changedObject = {};
        Object.keys(entity).forEach(
          (originalKey) => {
            const newKey = changeCaseOfKey(
              originalKey
            );
            changedObject[newKey] = parseoKey(
              entity[originalKey]
            );
          }
        );
        return changedObject;
      } else if (Array.isArray(entity)) {
        return entity.map((element) => {
          return parseoKey(element);
        });
      }

      return entity;
    };

    const parseoValues = (data) => {
      const keys = Object.keys(data);
      keys.shift();
      keys.forEach((key) => {
        data[key] = +data[key];
      });
      return data;
    };

    const sourceJson = data;

    const resultKeys = parseoKey(sourceJson);
    const result = parseoValues(resultKeys);
    return result;
  };

  const colorLegend = (
    selection,
    {
      colorScale,
      colorLegendLabel,
      colorLegendX,
      colorLegendY,
      tickSpacing = 15,
      tickPadding = 10,
      colorLegendLabelX = -10,
      colorLegendLabelY = -20,
    }
  ) => {
    const legend = selection
      .selectAll('g.colorLegend')
      .data([null])
      .join('g')
      .attr(
        'transform',
        `translate(${colorLegendX},${colorLegendY})`
      );

    legend
      .selectAll('text.color-legend-label')
      .data([null])
      .join('text')
      .attr('x', colorLegendLabelX)
      .attr('y', colorLegendLabelY)
      .attr('class', 'color-legend-label')
      .attr('font-family', 'sans-serif')
      .attr('font-size', 12)
      .text(colorLegendLabel);

    legend
      .selectAll('g.tick')
      .data(colorScale.domain())
      .join((enter) =>
        enter
          .append('g')
          .attr('class', 'tick')
          .call((selection) => {
            selection.append('circle');
            selection.append('text');
          })
      )
      .attr(
        'transform',
        (d, i) => `translate(0, ${i * tickSpacing})`
      )
      .attr('font-size', 10)
      .attr('font-family', 'sans-serif')
      .call((selection) => {
        selection
          .select('circle')
          .attr('r', 4)
          .attr('fill', colorScale)
          .attr('stroke', '#000')
          .attr('stroke-width', 0.5);
        selection
          .select('text')
          .attr('dy', '0.32em')
          .attr('x', tickPadding)
          .text((d) => d);
      });
  };

  function colorData(num) {
    switch (true) {
      case num >= 100:
        return d3.schemeGreens[6][5];
      case num > 80:
        return d3.schemeGreens[6][4];
      case num > 60:
        return d3.schemeGreens[6][3];
      case num > 40:
        return d3.schemeGreens[6][2];
      case num > 20:
        return d3.schemeGreens[6][1];
      case num <= 20:
        return d3.schemeGreens[6][0];
      default:
        return '#eee';
    }
  }

  function colorScale() {
    let scale = [];
    scale = scale.concat(d3.schemeGreens[6][4]);
    scale = scale.concat(d3.schemeGreens[6][2]);
    scale = scale.concat(d3.schemeGreens[6][0]);
    scale = scale.concat('#eee');
    return scale;
  }

  function numberScale() {
    let scale = [];
    scale = scale.concat('80-100%');
    scale = scale.concat('40-60%');
    scale = scale.concat('0-40%');
    scale = scale.concat('No Data');
    return scale;
  }

  const csvUrl = [
    'https://gist.githubusercontent.com/',
    'AleOG/',
    '167861566c4468391665993df0cdf68c/',
    'raw/e151675e2a2e4ac605c17d6336d135c98a1deca3/',
    'poblacionAragon.csv',
  ].join('');

  const width = window.innerWidth;
  const height = window.innerHeight;

  // Define map projection
  const projection = d3$1.geoMercator()
    .translate([width / 2, height / 0.18]) // translate to center of screen. You might have to fiddle with this
    //depending on the size of your screen
    .scale([3150]);

  const pathGenerator = d3$1.geoPath().projection(
    projection
  );

  let columns = '';
  let provinciasAragon = '';

  const tooltip = d3
    .select('body')
    .append('div')
    .attr('class', 'd3-tooltip')
    .style('position', 'absolute')
    .style('z-index', '10')
    .style('visibility', 'hidden')
    .style('padding', '10px')
    .style('background', 'rgba(0,0,0,0.6)')
    .style('border-radius', '5px')
    .style('color', 'white');

  //llamar al dataset
  const getData = async (
    selection,
    data
  ) => {
    const dataPoblacion = await d3$1.csv(
      csvUrl,
      parseador
    );
    columns = dataPoblacion.columns;
    //console.log(dataPoblacion)
    const dataProvinciasAragon = dataPoblacion.filter(
      (data) =>
        [
          'Arag贸n',
          'Provincia de Zaragoza',
          'Provincia de Huesca',
          'Provincia de Teruel',
        ].includes(data.Lugar_de_residencia)
          ? data
          : null
    );
    provinciasAragon = dataProvinciasAragon;

    function populationPercent(nameProvince) {
      console.log(nameProvince);

      const aragon = provinciasAragon.filter(
        (d) => {
          if (
            d['Lugar_de_residencia'] === 'Arag贸n'
          ) {
            return d['1_de_enero_2021_Ambos_sexos'];
          }
        }
      );
      const populationAragon =
        aragon[0]['1_de_enero_2021_Ambos_sexos'];

      const provincia = provinciasAragon.filter(
        (d) =>
          d['Lugar_de_residencia'].includes(
            nameProvince
          )
            ? d
            : null
      );

      const populationProvincia =
        provincia[0]['1_de_enero_2021_Ambos_sexos'];

      let round = Math.round(
        (populationProvincia / populationAragon) *
          100
      );
      console.log(round);
      return round;
    }

    function getColor(num) {
      let color = colorData(num);
      console.log(color);
      return color;
    }

    const comarcas = data.features.filter(
      (comarca) =>
        comarca.properties.ccaa === 'Arag贸n'
          ? comarca
          : null
    );

    selection
      .append('g')
      .selectAll('path')
      .data(comarcas)
      .join('path')
      .attr('class', 'ccaa')
      .attr('fill', '#d6ebff')
      .attr('stroke', 'black')
      .style('fill', (d) =>
        getColor(
          populationPercent(d.properties.provincia)
        )
      )
      .attr('stroke-width', 0.5)
      .attr('d', pathGenerator)
      .on('mouseover', function (event, data) {
        let porcentage = populationPercent(
          data.properties.provincia
        );
        tooltip
          .html(
            `${data.properties.provincia}: ${
            porcentage + ' %'
          }`
          )
          .style('visibility', 'visible');
      })
      .on('mousemove', function () {
        tooltip
          .style('top', event.pageY - 10 + 'px')
          .style('left', event.pageX + 50 + 'px');
      })
      .on('mouseout', function () {
        tooltip.style('visibility', 'hidden');
      });

    const colors = colorScale();
    const range = numberScale();

    const scale = d3$1.scaleOrdinal()
      .domain(range)
      .range(colors);

    selection.call(colorLegend, {
      colorScale: scale,
      colorLegendLabel:
        'Population Distribution in Arag贸n (2021)',
      colorLegendX: 75,
      colorLegendY: 300,
    });

    const zoom = d3
      .zoom()
      .scaleExtent([1, 10])
      .on('zoom', zoomed);

    selection.call(zoom);

    function zoomed(event) {
      const { transform } = event;
      console.log(transform);
      selection.attr('transform', transform);
    }
  };

  const width$1 = window.innerWidth;
  const height$1 = window.innerHeight;



  const svg = d3$1.select('body')
    .append('svg')
    .attr('width', width$1)
    .attr('height', height$1);

  // Replace ./data.json with your JSON feed


  fetch('comarcas_spain.json')
    .then((response) => {
      return response.json();
    })
    .then((data) => {
      // Work with JSON data here
    svg.call(getData, data);

    //console.log(columns)
    })
    .catch((err) => {
      // Do something for an error here
    console.log(err);
    });

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,